(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{216:function(t,s,e){"use strict";e.r(s);var a=e(6),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"defining-models"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defining-models","aria-hidden":"true"}},[t._v("#")]),t._v(" Defining models")]),t._v(" "),e("p",[t._v("Models are the central concept in trilogy â€” they're the containers\nthat all objects are created in and conform to, and they map to SQLite's\ntables. You create them with a "),e("em",[t._v("schema")]),t._v(" that defines what properties each\nobject will contain and what type each of those fields are. In SQLite\nyou would call these objects "),e("em",[t._v("rows")]),t._v(" and its properties "),e("em",[t._v("columns")]),t._v(", where\na column has a type such as "),e("code",[t._v("TEXT")]),t._v(" or "),e("code",[t._v("INTEGER")]),t._v(". In trilogy, those types\nare defined using JavaScript's usual suspects: "),e("code",[t._v("String")]),t._v(", "),e("code",[t._v("Number")]),t._v(", and\neven "),e("code",[t._v("Array")]),t._v(", "),e("code",[t._v("Object")]),t._v(", and more.")]),t._v(" "),e("p",[t._v("Let's first get trilogy imported and a database created:")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" connect "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'trilogy'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" db "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./storage.db'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Now, let's create a "),e("code",[t._v("users")]),t._v(" model:")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" userSchema "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  birthdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Date"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increments'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" users "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("model")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'users'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" userSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("There is now a "),e("code",[t._v("users")]),t._v(" model (table) in our SQLite database, with the\nproperties (columns) "),e("code",[t._v("name")]),t._v(", "),e("code",[t._v("age")]),t._v(", "),e("code",[t._v("birthdate")]),t._v(", and "),e("code",[t._v("id")]),t._v(". The first three\nare pretty obvious data types, while the third uses a special "),e("code",[t._v("'increments'")]),t._v("\ntype, which is short for the equivalent super verbose SQL\n"),e("code",[t._v("integer not null primary key autoincrement")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"property-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#property-types","aria-hidden":"true"}},[t._v("#")]),t._v(" Property types")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("type")]),t._v(" "),e("th",[t._v("description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("String")])]),t._v(" "),e("td",[t._v("stored as "),e("code",[t._v("text")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Number")])]),t._v(" "),e("td",[t._v("stored as "),e("code",[t._v("integer")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Boolean")])]),t._v(" "),e("td",[t._v("stored as "),e("code",[t._v("integer")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Date")])]),t._v(" "),e("td",[t._v("stored as "),e("code",[t._v("text")]),t._v(" ("),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",target:"_blank",rel:"noopener noreferrer"}},[t._v("ISO formatted string"),e("OutboundLink")],1),t._v(")")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Array")])]),t._v(" "),e("td",[t._v("stored as "),e("code",[t._v("text")]),t._v(" using "),e("code",[t._v("JSON.stringify")]),t._v(", returned using "),e("code",[t._v("JSON.parse")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Object")])]),t._v(" "),e("td",[t._v("stored as "),e("code",[t._v("text")]),t._v(" using "),e("code",[t._v("JSON.stringify")]),t._v(", returned using "),e("code",[t._v("JSON.parse")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("'json'")])]),t._v(" "),e("td",[t._v("stored as "),e("code",[t._v("text")]),t._v(" using "),e("code",[t._v("JSON.stringify")]),t._v(", returned using "),e("code",[t._v("JSON.parse")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("'increments'")])]),t._v(" "),e("td",[t._v("set as an auto-incrementing "),e("code",[t._v("integer")]),t._v(" & primary key")])])])]),t._v(" "),e("h2",{attrs:{id:"property-attributes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#property-attributes","aria-hidden":"true"}},[t._v("#")]),t._v(" Property attributes")]),t._v(" "),e("p",[t._v("There are also various attributes you can apply to a property. In that case\nwe move away from what is actually a shorthand for the property definition\nto its equivalent object definition where we can then add more attributes:")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("  const userSchema = {\n"),e("span",{pre:!0,attrs:{class:"token deleted"}},[t._v("-   name: String,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token inserted"}},[t._v("+   name: { type: String, primary: true }")]),t._v("\n    age: Number,\n    birthdate: Date,\n    id: 'increments'\n  }\n")])])]),e("table",[e("thead",[e("tr",[e("th",[t._v("attribute")]),t._v(" "),e("th",[t._v("type")]),t._v(" "),e("th",[t._v("description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("primary")])]),t._v(" "),e("td",[e("code",[t._v("boolean")])]),t._v(" "),e("td",[t._v("Whether to set this property as the primary key.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("defaultTo")])]),t._v(" "),e("td",[e("code",[t._v("any")])]),t._v(" "),e("td",[t._v("Default value to use when absent.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("unique")])]),t._v(" "),e("td",[e("code",[t._v("boolean")])]),t._v(" "),e("td",[t._v("Whether the property is required to be unique.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("nullable")])]),t._v(" "),e("td",[e("code",[t._v("boolean")])]),t._v(" "),e("td",[t._v("Whether to allow null values.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("notNullable")])]),t._v(" "),e("td",[e("code",[t._v("boolean")])]),t._v(" "),e("td",[t._v("Works inversely to "),e("code",[t._v("nullable")]),t._v(".")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("index")])]),t._v(" "),e("td",[e("code",[t._v("string")])]),t._v(" "),e("td",[t._v("Specifies the property as an index with the provided name.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("get")])]),t._v(" "),e("td",[e("code",[t._v("Function")])]),t._v(" "),e("td",[t._v("Triggered on selects, receives the raw value and should return a new value.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("set")])]),t._v(" "),e("td",[e("code",[t._v("Function")])]),t._v(" "),e("td",[t._v("Triggered on inserts, receives the input value and should return a new value.")])])])]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myGamesSchema "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" primary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  category"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultTo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'backlog'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  genre"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  owned"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Boolean\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"property-descriptors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#property-descriptors","aria-hidden":"true"}},[t._v("#")]),t._v(" Property descriptors")]),t._v(" "),e("p",[t._v("Now that you've seen types and attributes, the values collectively known\nas a property's "),e("em",[t._v("descriptor")]),t._v(", let's move on to take a deeper dive into the\nproperty definitions of a schema for a "),e("code",[t._v("cars")]),t._v(" model.")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("model")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cars'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increments'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  make"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultTo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ford'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nullable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  year"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The schema is the object passed as the second argument to "),e("code",[t._v("model()")]),t._v(".\nEach key of this object is the name of a property, so in the model\n"),e("code",[t._v("cars")]),t._v(", there are 4 properties: "),e("code",[t._v("id")]),t._v(", "),e("code",[t._v("make")]),t._v(", "),e("code",[t._v("model")]),t._v(", and "),e("code",[t._v("year")]),t._v(".")]),t._v(" "),e("p",[t._v("Let's break down each descriptor, starting with "),e("code",[t._v("id")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("div",{staticClass:"highlight-lines"},[e("br"),e("div",{staticClass:"highlighted"},[t._v("Â ")]),e("br"),e("br"),e("br"),e("br"),e("br")]),e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increments'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  make"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultTo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ford'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nullable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  year"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("id")]),t._v(" property is defined with "),e("code",[t._v("'increments'")]),t._v(" as its type. As shown\nearlier in the types section, this is a special type that's really a shortcut\nfor the super long SQL "),e("code",[t._v("integer not null primary key autoincrement")]),t._v(". It\ndeclares "),e("code",[t._v("id")]),t._v(" as a field that will automatically set itself to the last\ninserted row's id + 1, and is the primary key of the table â€” the one\nthat prevents duplicates.")]),t._v(" "),e("p",[t._v("Remember that you can define other types and attributes by providing an object\ninstead of just the type. This is done with the next descriptor, "),e("code",[t._v("make")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("div",{staticClass:"highlight-lines"},[e("br"),e("br"),e("div",{staticClass:"highlighted"},[t._v("Â ")]),e("br"),e("br"),e("br"),e("br")]),e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increments'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  make"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultTo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ford'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nullable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  year"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Here, we don't use a string value to declare the type. We use the standard\nJavaScript "),e("code",[t._v("String")]),t._v(" constructor. You can do the same with "),e("code",[t._v("Number")]),t._v(", "),e("code",[t._v("Boolean")]),t._v(",\nand "),e("code",[t._v("Date")]),t._v(" as seen eariler. This stores "),e("code",[t._v("make")]),t._v(" as a "),e("code",[t._v("text")]),t._v(" column in SQLite.")]),t._v(" "),e("p",[t._v("We also use the "),e("code",[t._v("defaultTo")]),t._v(" property to set a value that should be used\nwhen "),e("code",[t._v("make")]),t._v(" isn't provided at creation time.")]),t._v(" "),e("p",[t._v("Next up is "),e("code",[t._v("model")]),t._v(" (not to be confused with trilogy's "),e("code",[t._v("model")]),t._v("):")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("div",{staticClass:"highlight-lines"},[e("br"),e("br"),e("br"),e("div",{staticClass:"highlighted"},[t._v("Â ")]),e("br"),e("br"),e("br")]),e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increments'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  make"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultTo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ford'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nullable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  year"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("code",[t._v("model")]),t._v(" is also a "),e("code",[t._v("String")]),t._v(" type, but in this case we set the "),e("code",[t._v("nullable")]),t._v("\nproperty to false. This essentially means "),e("code",[t._v("model")]),t._v(" is a required property.")]),t._v(" "),e("p",[t._v("And finally "),e("code",[t._v("year")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("div",{staticClass:"highlight-lines"},[e("br"),e("br"),e("br"),e("br"),e("div",{staticClass:"highlighted"},[t._v("Â ")]),e("br"),e("br")]),e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increments'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  make"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultTo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ford'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nullable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  year"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Back to basics on this one. It's defined with the same shorthand as "),e("code",[t._v("id")]),t._v(",\nonly this time it's a "),e("code",[t._v("Number")]),t._v(". This is stored as an "),e("code",[t._v("integer")]),t._v(" column in\nSQLite.")])])},[],!1,null,null,null);s.default=n.exports}}]);